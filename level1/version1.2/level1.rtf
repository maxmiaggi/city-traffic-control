{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\f0\fs14 // trail code for level 1 implementation\par
// version 1.2: Fixed Delay Implementation\par
\par
`define TRUE      1'b1\par
`define FALSE     1'b0\par
\par
`define RED       2'd0    // 2'b00 = RED\par
`define YELLOW    2'd1    // 2'b01 = YELLOW\par
`define GREEN     2'd2    // 2'b10 = GREEN\par
\par
`define Y2RDELAY  3       // Delay from Y to R (number of posedges of clock)\par
`define G2YDELAY  2       // Delay from G to Y (number of posedges of clock)\par
\par
`define RD_EMPTY  3'd0    // 3'b000 = EMPTY\par
`define RD_LESS   3'd1    // 3'b001 = LESS CROWDED\par
`define RD_MORE   3'd3    // 3'b011 = MORE CROWDED\par
`define RD_FULL   3'd7    // 3'b111 = FULL CROWDED\par
\par
// state definition\par
`define T1G       3'd0    // 3'b000 = State 0 = T1 GREEN\par
`define T1Y       3'd1    // 3'b001 = State 1 = T1 YELLOW\par
`define T2G       3'd2    // 3'b010 = State 2 = T2 GREEN\par
`define T2Y       3'd3    // 3'b011 = State 3 = T2 YELLOW\par
`define T3G       3'd4    // 3'b100 = State 4 = T3 GREEN\par
`define T3Y       3'd5    // 3'b101 = State 5 = T3 YELLOW\par
`define T4G       3'd6    // 3'b110 = State 6 = T4 GREEN\par
`define T4Y       3'd7    // 3'b111 = State 7 = T4 YELLOW\par
\par
module level1(T, T1, T2, T3, T4, S1, S2, S3, S4, clock, clear, delay_counter);\par
  output  [1:0] T1, T2, T3, T4;     // four traffic lights\par
  reg     [1:0] T1, T2, T3, T4;\par
  input   [2:0] S1, S2, S3, S4;     // four sets of three sensors per road\par
  input   clock, clear;   \par
  \par
  output  [3:0] T;                  // to maintain cycle operation among T1, T2, T3, T4\par
  reg     [3:0] T;                  // output only to view it from testbench\par
  \par
  reg     [2:0] state, next_state;  // internal state variables\par
  \par
  output  [3:0] delay_counter;      // counter to control delay, introduced in v1.2\par
  reg     [3:0] delay_counter;      // output only to view it from testbench\par
  \par
\par
  // initially T1 is green, rest all are red\par
  // initial state is T1GREEN (T1G)\par
  \par
  always @(clear)\par
  // initial\par
  begin\par
    state = `T1G;\par
    next_state = `T1G;\par
    T1 = `GREEN;\par
    T2 = `RED;\par
    T3 = `RED;\par
    T4 = `RED;\par
    T  = 4'd8;        // initialize cycle to 4'b1000\par
    delay_counter = 4'd0; // initialize delay counter to zero\par
  end\par
  \par
  // state changes only at posedge of clock\par
  // delay counter increases at posedge of clock\par
  always @(posedge clock)\par
  begin\par
    state = next_state;\par
    delay_counter = delay_counter + 1;\par
  end\par
  \par
  // compute traffic light values\par
  always @(state)\par
  begin\par
    case (state)\par
      `T1G: begin T1 = `GREEN;  T2 = `RED;    T3 = `RED;    T4 = `RED;    end\par
      `T1Y: begin T1 = `YELLOW; T2 = `RED;    T3 = `RED;    T4 = `RED;    end \par
      `T2G: begin T1 = `RED;    T2 = `GREEN;  T3 = `RED;    T4 = `RED;    end \par
      `T2Y: begin T1 = `RED;    T2 = `YELLOW; T3 = `RED;    T4 = `RED;    end \par
      `T3G: begin T1 = `RED;    T2 = `RED;    T3 = `GREEN;  T4 = `RED;    end \par
      `T3Y: begin T1 = `RED;    T2 = `RED;    T3 = `YELLOW; T4 = `RED;    end  \par
      `T4G: begin T1 = `RED;    T2 = `RED;    T3 = `RED;    T4 = `GREEN;  end\par
      `T4Y: begin T1 = `RED;    T2 = `RED;    T3 = `RED;    T4 = `YELLOW; end\par
    endcase\par
  end\par
  \par
  // function to compute the probable next state based upon\par
  // sensor values and cycle value of T\par
  task calc_prob_next_state; // probable next state as output\par
    output [2:0] prob_next_state;  // probable next state as output\par
    input  [2:0] s1, s2, s3, s4;   // four sensor values as input\par
    inout  [3:0] t;                // cycle variable as input\par
    begin\par
      \par
      // case structure to ensure cyclic response\par
      // T = [T1, T2, T3, T4]\par
      // only 8 cases are considered out of 16 since T1 will always be made green\par
      // at the start of every cycle\par
      \par
      case (t)\par
        4'b0000:  begin\par
                    prob_next_state = `T1G;   // T1 GREEN\par
                    t = t|4'b1000;            // update T\par
                  end\par
                  \par
        4'b1000:  begin\par
                    if (s2 >= s3)\par
                    begin\par
                      if (s2 >= s4)\par
                      begin\par
                        prob_next_state = `T2G; // T2 GREEN\par
                        t = t|4'b0100;          // update T\par
                      end\par
                      else begin\par
                        prob_next_state = `T4G; // T4 GREEN\par
                        t = t|4'b0001;          // update T\par
                      end\par
                    end     // end of first if half\par
                    else begin\par
                      if (s3 >= s4)  begin\par
                        prob_next_state = `T3G; // T3 GREEN\par
                        t = t|4'b0010;          // update T\par
                      end\par
                      else begin\par
                        prob_next_state = `T4G; // T4 GREEN\par
                        t = t|4'b0001;          // update T\par
                      end\par
                    end     // end of if-else\par
                  end   // end of first case\par
                  \par
        4'b1001:  begin\par
                    if (s2 >= s3)  begin\par
                      prob_next_state = `T2G;   // T2 GREEN\par
                      t = t|4'b0100;            // update T\par
                    end\par
                    else begin\par
                      prob_next_state = `T3G;   // T3 GREEN\par
                      t = t|4'b0010;            // update T\par
                    end\par
                  end\par
        \par
        4'b1010:  begin\par
                    if (s2 >= s4)  begin\par
                      prob_next_state = `T2G;   // T2 GREEN\par
                      t = t|4'b0100;            // update T\par
                    end\par
                    else begin\par
                      prob_next_state = `T4G;   // T4 GREEN\par
                      t = t|4'b0001;             // update T\par
                    end\par
                  end\par
                  \par
        4'b1100:  begin\par
                    if (s3 >= s4)  begin\par
                      prob_next_state = `T3G;   // T3 GREEN\par
                      t = t|4'b0010;             // update T\par
                    end\par
                    else begin\par
                      prob_next_state = `T4G;   // T4 GREEN\par
                      t = t|4'b0001;             // update T\par
                    end\par
                  end \par
                  \par
        4'b1011:  begin\par
                    prob_next_state = `T2G;   // T2 GREEN\par
                    t = 4'b0000;              // update T   \par
                  end\par
                  \par
        4'b1101:  begin\par
                    prob_next_state = `T3G;   // T3 GREEN\par
                    t = 4'b0000;              // update T   \par
                  end\par
                  \par
        4'b1110:  begin\par
                    prob_next_state = `T4G;   // T4 GREEN\par
                    t = 4'b0000;              // update T   \par
                  end\par
      endcase     // end of case\par
    end           // end of task begin\par
  endtask         // end of task\par
  \par
  // state machine using case statement\par
  // always @(state, clear, S1, S2, S3, S4, T)\par
  always @*\par
  begin\par
    if (clear)\par
      next_state = `T1G;                      // reset state is T1 GREEN\par
    \par
    else begin\par
      case (state)\par
        `T1G: begin\par
                // repeat(`G2YDELAY) @(posedge clock);              // wait from G to Y\par
                if(delay_counter >= `G2YDELAY) begin                // wait from G to Y (v1.2)\par
                  next_state = `T1Y;                                // next state is Y of same G\par
                  delay_counter = 4'd0;                             // clear counter upon state change (v1.2)\par
                end\par
              end\par
        \par
        `T1Y: begin\par
                // repeat(`Y2RDELAY) @(posedge clock);               // wait from Y to R\par
                if(delay_counter >= `Y2RDELAY) begin                 // wait from Y to R (v1.2)\par
                  calc_prob_next_state(next_state, S1, S2, S3, S4, T); // calling task to update next_state and T\par
                  delay_counter = 4'd0;                              // clear counter upon state change (v1.2)\par
                end\par
              end\par
              \par
        `T2G: begin\par
                // repeat(`G2YDELAY) @(posedge clock);               // wait from G to Y\par
                if(delay_counter >= `G2YDELAY) begin                 // wait from G to Y (v1.2)\par
                  next_state = `T2Y;                                 // next state is Y of same G\par
                  delay_counter = 4'd0;                              // clear counter upon state change (v1.2)\par
                end\par
              end\par
        \par
        `T2Y: begin\par
                // repeat(`Y2RDELAY) @(posedge clock);               // wait from Y to R\par
                if(delay_counter >= `Y2RDELAY) begin                 // wait from Y to R (v1.2)\par
                  calc_prob_next_state(next_state, S1, S2, S3, S4, T); // calling task to update next_state and T\par
                  delay_counter = 4'd0;                              // clear counter upon state change (v1.2)\par
                end\par
              end\par
              \par
        `T3G: begin\par
                // repeat(`G2YDELAY) @(posedge clock);               // wait from G to Y\par
                if(delay_counter >= `G2YDELAY) begin                 // wait from G to Y (v1.2)\par
                  next_state = `T3Y;                                 // next state is Y of same G\par
                  delay_counter = 4'd0;                              // clear counter upon state change (v1.2)\par
                end\par
              end\par
        \par
        `T3Y: begin\par
                // repeat(`Y2RDELAY) @(posedge clock);               // wait from Y to R\par
                if(delay_counter >= `Y2RDELAY) begin                 // wait from Y to R (v1.2)\par
                  calc_prob_next_state(next_state, S1, S2, S3, S4, T); // calling task to update next_state and T\par
                  delay_counter = 4'd0;                              // clear counter upon state change (v1.2)\par
                end\par
              end\par
              \par
        `T4G: begin\par
                // repeat(`G2YDELAY) @(posedge clock);               // wait from G to Y\par
                if(delay_counter >= `G2YDELAY) begin                 // wait from G to Y (v1.2)\par
                  next_state = `T4Y;                                 // next state is Y of same G\par
                  delay_counter = 4'd0;                              // clear counter upon state change (v1.2)\par
                end\par
              end\par
        \par
        `T4Y: begin\par
                // repeat(`Y2RDELAY) @(posedge clock);               // wait from Y to R\par
                if(delay_counter >= `Y2RDELAY) begin                 // wait from Y to R (v1.2)\par
                  calc_prob_next_state(next_state, S1, S2, S3, S4, T); // calling task to update next_state and T\par
                  delay_counter = 4'd0;                              // clear counter upon state change (v1.2)\par
                end\par
              end\par
              \par
      endcase   // end of case\par
    end     // end of if-else\par
  end    // end of always                \par
          \par
endmodule\par
}
 